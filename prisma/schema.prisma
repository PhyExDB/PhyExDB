// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  email         String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  ratings       Rating[]
  comments      Comment[]
  files         File[]
  userFile      UserFile?
  experiments   Experiment[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model LegalDocument {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Startpage {
  id        Boolean   @id @default(true)
  text      String
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experiment {
  id             String                     @id @default(uuid())
  name           String
  slug           String                     @unique
  user           User?                      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  status         ExperimentStatus           @default(DRAFT)
  duration       Int
  previewImage   File?                      @relation(fields: [previewImageId], references: [id])
  previewImageId String?
  sections       ExperimentSectionContent[]
  attributes     ExperimentAttributeValue[] // implicit many to many, pivot managed by Prisma
  ratings        Rating[]
  ratingsCount   Int                        @default(0)
  ratingsSum     Int                        @default(0)
  ratingsAvg     Float                      @default(0)
  comments       Comment[]
  revisionOf     Experiment?                @relation("Revision", fields: [revisionOfId], references: [id])
  revisedBy      Experiment?                @relation("Revision")
  revisionOfId   String?                    @unique
  changeRequest  String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
}

enum ExperimentStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
  REJECTED
}

model ExperimentSection {
  id          String                     @id @default(uuid())
  name        String
  slug        String                     @unique
  order       Int                        @unique
  experiments ExperimentSectionContent[]
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
}

model ExperimentSectionContent {
  id                  String            @id @default(uuid())
  experiment          Experiment        @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId        String
  experimentSection   ExperimentSection @relation(fields: [experimentSectionId], references: [id])
  experimentSectionId String
  text                String
  files               ExperimentFile[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([experimentId, experimentSectionId])
}

model ExperimentAttribute {
  id                String                     @id @default(uuid())
  name              String
  slug              String                     @unique
  order             Int                        @unique
  multipleSelection Boolean
  values            ExperimentAttributeValue[]
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
}

model ExperimentAttributeValue {
  id          String              @id @default(uuid())
  experiments Experiment[] // implicit many to many, pivot managed by Prisma
  attribute   ExperimentAttribute @relation(fields: [attributeId], references: [id])
  attributeId String
  value       String
  slug        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model File {
  id                    String          @id @default(uuid())
  originalName          String
  path                  String
  mimeType              String
  experimentFile        ExperimentFile[]
  experimentPreviewFile Experiment[]
  startPage             Startpage       @relation(fields: [startpageId], references: [id])
  startpageId           Boolean
  userFile              UserFile?
  createdBy             User?           @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById           String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model ExperimentFile {
  id                  String                   @id @default(uuid())
  file                File                     @relation(fields: [fileId], references: [id])
  fileId              String
  description         String?
  experimentSection   ExperimentSectionContent @relation(fields: [experimentSectionId], references: [id], onDelete: Cascade)
  experimentSectionId String
  order               Int
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  @@unique([experimentSectionId, order])
}

model UserFile {
  id     String  @id @default(uuid())
  file   File    @relation(fields: [fileId], references: [id])
  fileId String  @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Rating {
  value        Int
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  experiment   Experiment  @relation(fields: [experimentId], references: [id])
  experimentId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@id(name: "compoundId", [userId, experimentId])
}

model Comment {
  id           String      @id @default(uuid())
  text         String
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  experiment   Experiment? @relation(fields: [experimentId], references: [id], onDelete: SetNull)
  experimentId String?
  parent       Comment?    @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  parentId     String?
  children     Comment[]   @relation("CommentToComment")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model SeedStatus {
  name        String   @id
  performedAt DateTime @default(now())
}
