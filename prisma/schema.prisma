// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  email         String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  files         File[]
  userFile      UserFile?
  experiments   Experiment[]

  @@unique([email])
  @@map("user")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model LegalDocument {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experiment {
  id             String                     @id @default(uuid())
  name           String
  slug           String                     @unique
  user           User                       @relation(fields: [userId], references: [id])
  userId         String
  status         ExperimentStatus           @default(DRAFT)
  duration       Int
  previewImage   File?                      @relation(fields: [previewImageId], references: [id])
  previewImageId String?                    @unique
  sections       ExperimentSectionContent[]
  attributes     ExperimentAttributeValue[] // implicit many to many, pivot managed by Prisma
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
}

enum ExperimentStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
}

model ExperimentSection {
  id          String                     @id @default(uuid())
  name        String
  slug        String                     @unique
  order       Int                        @unique
  experiments ExperimentSectionContent[]
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
}

model ExperimentSectionContent {
  id                  String            @id @default(uuid())
  experiment          Experiment        @relation(fields: [experimentId], references: [id])
  experimentId        String
  experimentSection   ExperimentSection @relation(fields: [experimentSectionId], references: [id])
  experimentSectionId String
  text                String
  files               ExperimentFile[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model ExperimentAttribute {
  id        String                     @id @default(uuid())
  name      String
  slug      String                     @unique
  values    ExperimentAttributeValue[]
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
}

model ExperimentAttributeValue {
  id          String              @id @default(uuid())
  experiments Experiment[] // implicit many to many, pivot managed by Prisma
  attribute   ExperimentAttribute @relation(fields: [attributeId], references: [id])
  attributeId String
  value       String
  slug        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model File {
  id                    String          @id @default(uuid())
  path                  String
  mimeType              String
  experimentFile        ExperimentFile?
  experimentPreviewFile Experiment?
  userFile              UserFile?
  createdBy             User            @relation(fields: [createdById], references: [id])
  createdById           String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model ExperimentFile {
  id                  String                   @id @default(uuid())
  file                File                     @relation(fields: [fileId], references: [id])
  fileId              String                   @unique
  description         String?
  experimentSection   ExperimentSectionContent @relation(fields: [experimentSectionId], references: [id])
  experimentSectionId String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model UserFile {
  id     String  @id @default(uuid())
  file   File    @relation(fields: [fileId], references: [id])
  fileId String  @unique
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
